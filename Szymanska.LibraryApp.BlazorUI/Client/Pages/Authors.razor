@page "/authors"
@inject IAuthorService AuthorService
@inject NavigationManager NavigationManager

<PageTitle>LibraryApp</PageTitle>

<h3>Authors</h3>

<div class="mb-3 input-group">
    <input class="form-control" id="search" @bind="searchTerm" @onkeyup="OnKeyUp" />
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="SearchAuthors">Search</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Surname</th>
            <th>Birth Date</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var author in filteredAuthors)
        {
            <tr>
                <td>@author.Name</td>
                <td>@author.Surname</td>
                <td>@author.BirthDate.ToShortDateString()</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowAuthor(author.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                    <button class="btn btn-danger" @onclick="(() => DeleteAuthor(author.Id))">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary" @onclick="CreateNewAuthor">
    Create New Author
</button>

@code {
    private string searchTerm = "";
    private List<Author> filteredAuthors = new List<Author>();

    protected override async Task OnInitializedAsync()
    {
        await LoadAuthors();
    }

    private async Task LoadAuthors()
    {
        await AuthorService.GetAuthors();
        UpdateFilteredAuthors();
    }

    private void UpdateFilteredAuthors()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredAuthors = AuthorService.Authors.ToList();
        }
        else
        {
            filteredAuthors = AuthorService.Authors
                .Where(author =>
                    author.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    author.Surname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    author.BirthDate.ToShortDateString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    void ShowAuthor(int id)
    {
        NavigationManager.NavigateTo($"author/{id}");
    }

    async Task DeleteAuthor(int id)
    {
        await AuthorService.DeleteAuthor(id);
        await LoadAuthors();
    }

    void CreateNewAuthor()
    {
        NavigationManager.NavigateTo("/author");
    }

    private void SearchAuthors()
    {
        UpdateFilteredAuthors();
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchAuthors();
        }
    }
}
