@page "/publishers"
@inject IPublisherService PublisherService
@inject NavigationManager NavigationManager

<PageTitle>LibraryApp</PageTitle>

<h3>Publishers</h3>

<div class="mb-3 input-group">
    <input class="form-control" id="search" @bind="searchTerm" @onkeyup="OnKeyUp" />
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="SearchPublishers">Search</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var publisher in filteredPublishers)
        {
            <tr>
                <td>@publisher.Name</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => ShowPublisher(publisher.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                    <button class="btn btn-danger" @onclick="(() => DeletePublisher(publisher.Id))">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary" @onclick="CreateNewPublisher">
    Create New Publisher
</button>

@code {
    private string searchTerm = "";
    private List<Publisher> filteredPublishers = new List<Publisher>();

    protected override async Task OnInitializedAsync()
    {
        await LoadPublishers();
    }

    private async Task LoadPublishers()
    {
        await PublisherService.GetPublishers();
        UpdateFilteredPublishers();
    }

    private void UpdateFilteredPublishers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPublishers = PublisherService.Publishers.ToList();
        }
        else
        {
            filteredPublishers = PublisherService.Publishers
                .Where(publisher =>
                    publisher.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    void ShowPublisher(int id)
    {
        NavigationManager.NavigateTo($"publisher/{id}");
    }

    async Task DeletePublisher(int id)
    {
        await PublisherService.DeletePublisher(id);
        await LoadPublishers();
    }

    void CreateNewPublisher()
    {
        NavigationManager.NavigateTo("/publisher");
    }

    private void SearchPublishers()
    {
        UpdateFilteredPublishers();
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchPublishers();
        }
    }
}
